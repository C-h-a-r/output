(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports) :
  typeof define === 'function' && define.amd ? define(['exports'], factory) :
  (factory((global.parabox = {})));
}(this, (function (exports) { 'use strict';

  var paraboxShifts = void 0;

  function getZHeight(el) {
    var height = el.dataset.paraboxHeight || getComputedStyle(el).getPropertyValue('--parabox-height');
    return height;
  }

  function paraboxShift(shiftX, shiftY, el) {
    var height = getZHeight(el) || 5;
    shiftX /= 100 / height;
    shiftY /= 100 / height;
    el.style.transform = 'translate(' + shiftX + 'px, ' + shiftY + 'px)';
  }

  function shiftChildren(parent, offsetX, offsetY) {
    var childShifts = parent.querySelectorAll('.parabox-shift');

    childShifts.forEach(function (shift) {
      paraboxShift(offsetX, offsetY, shift);
    });
  }

  function init() {
    paraboxShifts = document.querySelectorAll('.parabox-shift');
  }

  var paraboxes = [];

  function getTransformMultiplier(el) {
    var multiplier = el.dataset.paraboxMultiplier || getComputedStyle(el).getPropertyValue('--parabox-multiplier') || 1;
    return multiplier;
  }

  function tiltBox(e, el) {
    var rect = el.getBoundingClientRect();

    var horToBoxCenter = e.clientX - rect.left - rect.width / 2;
    var verToBoxCenter = e.clientY - rect.top - rect.height / 2;

    var transformX = horToBoxCenter * getTransformMultiplier(el);
    var transformY = verToBoxCenter * getTransformMultiplier(el);

    el.style.boxShadow = transformX * -1 / rect.width * 4 + 'px ' + transformY * -1 / rect.height * 4 + 'px 4px rgba(0, 0, 0, 0.25)';

    el.style.transform = 'rotateX(' + transformY / rect.height * -4 + 'deg) rotateY(' + transformX * 1 / rect.width * 4 + 'deg)';

    shiftChildren(el, transformX, transformY);
  }

  function resetBox(el) {
    el.style.transform = '';

    shiftChildren(el, 0, 0);
  }

  function init$1() {
    paraboxes = document.querySelectorAll('.parabox');

    paraboxes.forEach(function (parabox) {
      parabox.addEventListener('mousemove', function (e) {
        tiltBox(e, parabox);
      });
      parabox.addEventListener('mouseleave', function () {
        resetBox(parabox);
      });
    });

    init();
  }

  var parabox = {
    init: init$1
  };

  exports.init = init$1;
  exports.default = parabox;

  Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=parabox.js.map
